// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name fsiossdk
import AuthenticationServices
import Foundation
import SocketIO
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FSFullGame : UIKit.UIView, AuthenticationServices.ASAuthorizationControllerDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) public var userToken: Swift.String?
  @_Concurrency.MainActor(unsafe) public var pushToken: Swift.String?
  @_Concurrency.MainActor(unsafe) public var FSApiKey: Swift.String?
  @_Concurrency.MainActor(unsafe) public var extras: [Swift.String : Swift.String]?
  @_Concurrency.MainActor(unsafe) public var gameId: Swift.String
  @_Concurrency.MainActor(unsafe) public init(id: Swift.String?, userToken: Swift.String? = "", pushToken: Swift.String? = "", FSApiKey: Swift.String? = "", extras: [Swift.String : Swift.String]? = [:], frame: CoreGraphics.CGRect? = CGRect())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func openPage(completion: @escaping (Swift.String) -> ())
  @available(iOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc public func authorizationController(controller: AuthenticationServices.ASAuthorizationController, didCompleteWithAuthorization authorization: AuthenticationServices.ASAuthorization)
  @_Concurrency.MainActor(unsafe) public var actionCallback: ((_ id: Swift.String) -> Swift.Void)?
  @objc deinit
}
extension fsiossdk.FSMiniGame : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FSMiniGame : UIKit.UIView, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) public var userToken: Swift.String?
  @_Concurrency.MainActor(unsafe) public var pushToken: Swift.String?
  @_Concurrency.MainActor(unsafe) public var FSApiKey: Swift.String?
  @_Concurrency.MainActor(unsafe) public var miniGameId: Swift.String
  @_Concurrency.MainActor(unsafe) public init(id: Swift.String?, userToken: Swift.String? = "", pushToken: Swift.String? = "", FSApiKey: Swift.String? = "", frame: CoreGraphics.CGRect? = CGRect())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) public func openPage(completion: @escaping (Swift.String) -> ())
  @_Concurrency.MainActor(unsafe) public var actionCallback: ((_ id: Swift.String) -> Swift.Void)?
  @objc deinit
}
